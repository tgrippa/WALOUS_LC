if(!is.element('doParallel', installed.packages()[,1])){
cat('\n\nInstalling doParallel package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('doParallel', dependencies=TRUE)}
if(!is.element('caret', installed.packages()[,1])){
cat('\n\nInstalling caret package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('caret', dependencies=TRUE)}
if(!is.element('e1071', installed.packages()[,1])){
cat('\n\nInstalling e1071 package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('e1071', dependencies=TRUE)}
if(!is.element('randomForest', installed.packages()[,1])){
cat('\n\nInstalling randomForest package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('randomForest', dependencies=TRUE)}
if(!is.element('pROC', installed.packages()[,1])){
cat('\n\nInstalling pROC package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('pROC', dependencies=TRUE)}
library(parallel)
require(parallel)
library(doParallel)
require(doParallel)
library(caret)
require(caret)
library(randomForest)
require(randomForest)
library(e1071)
require(e1071)
library(pROC)
require(pROC)
# Set number of cores to use
usedcores=4
registerDoParallel(usedcores)
# Import object statistics as dataframe
features <- read.csv('../../../Results/Classification_features/features_tile_178.csv', sep=',', header=TRUE, row.names=1)
# Load trained RF model
rfModel <- readRDS('../../../Results/Classif_RF/rf_trained_model.rda')
setwd("/media/tais/data/WALOUS/Processing/GithubRepository_WALOUS/notebook")
# Import object statistics as dataframe
features <- read.csv('../../../Results/Classification_features/features_tile_178.csv', sep=',', header=TRUE, row.names=1)
# Load trained RF model
rfModel <- readRDS('../../../Results/Classif_RF/rf_trained_model.rda')
# Predict class
predicted <- data.frame(predict(rfModel, features))
rf_predictions <- data.frame(id=rownames(features), predicted)
names(rf_predictions) <- c('cat_', 'rf_prediction')
# Export to csv
write.csv(rf_predictions, file='../../../Results/Classif_RF/classif_tiles/RF_fusion_tile_178.csv', row.names=FALSE, quote=FALSE)
