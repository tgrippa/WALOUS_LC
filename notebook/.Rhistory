if(!is.element('doParallel', installed.packages()[,1])){
cat('\n\nInstalling doParallel package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('doParallel', dependencies=TRUE)}
if(!is.element('caret', installed.packages()[,1])){
cat('\n\nInstalling caret package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('caret', dependencies=TRUE)}
if(!is.element('e1071', installed.packages()[,1])){
cat('\n\nInstalling e1071 package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('e1071', dependencies=TRUE)}
if(!is.element('randomForest', installed.packages()[,1])){
cat('\n\nInstalling randomForest package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('randomForest', dependencies=TRUE)}
if(!is.element('pROC', installed.packages()[,1])){
cat('\n\nInstalling pROC package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('pROC', dependencies=TRUE)}
if(!is.element('reticulate', installed.packages()[,1])){
cat('\n\nInstalling reticulate package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('reticulate', dependencies=TRUE)}
library(parallel)
require(parallel)
library(doParallel)
require(doParallel)
library(caret)
require(caret)
library(randomForest)
require(randomForest)
library(e1071)
require(e1071)
library(pROC)
require(pROC)
library(reticulate)
require(reticulate)
# Set the path to the Python executable file
use_python('/usr/bin/python2', required = T)
source_python('../SRC/EquivalentReferenceProbability.py')
# Set number of cores to use
usedcores=4
registerDoParallel(usedcores)
# Import object statistics as dataframe
features <- read.csv('../../../Results_V2/Classification_features/features_tile_177.csv', sep=',', header=TRUE, row.names=1)
# Load trained RF model
rfModel <- readRDS('../../../Results_V2/Classif_RF_TEST/rf_trained_model.rda')
# Predict probability of each class (SoftProb)
predicted_prob <- data.frame(predict(rfModel, features, type='prob'))
names(predicted_prob) <- substring(names(predicted_prob),2)
colnames(predicted_prob) <- paste('prob', colnames(predicted_prob), sep = '_')
# Export class prob to csv
path_tmp_csv <- tempfile(pattern = 'file', tmpdir = tempdir(), fileext = '.csv')
write.csv(predicted_prob, file=path_tmp_csv, row.names=TRUE, quote=FALSE)
setwd("/media/tais/data/WALOUS/Processing/GithubRepository_WALOUS/notebook")
if(!is.element('doParallel', installed.packages()[,1])){
cat('\n\nInstalling doParallel package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('doParallel', dependencies=TRUE)}
if(!is.element('caret', installed.packages()[,1])){
cat('\n\nInstalling caret package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('caret', dependencies=TRUE)}
if(!is.element('e1071', installed.packages()[,1])){
cat('\n\nInstalling e1071 package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('e1071', dependencies=TRUE)}
if(!is.element('randomForest', installed.packages()[,1])){
cat('\n\nInstalling randomForest package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('randomForest', dependencies=TRUE)}
if(!is.element('pROC', installed.packages()[,1])){
cat('\n\nInstalling pROC package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('pROC', dependencies=TRUE)}
if(!is.element('reticulate', installed.packages()[,1])){
cat('\n\nInstalling reticulate package from CRAN
')
if(!file.exists(Sys.getenv('R_LIBS_USER'))){
dir.create(Sys.getenv('R_LIBS_USER'), recursive=TRUE)
.libPaths(Sys.getenv('R_LIBS_USER'))}
chooseCRANmirror(ind=1)
install.packages('reticulate', dependencies=TRUE)}
library(parallel)
require(parallel)
library(doParallel)
require(doParallel)
library(caret)
require(caret)
library(randomForest)
require(randomForest)
library(e1071)
require(e1071)
library(pROC)
require(pROC)
library(reticulate)
require(reticulate)
# Set the path to the Python executable file
use_python('/usr/bin/python2', required = T)
source_python('../SRC/EquivalentReferenceProbability.py')
# Set number of cores to use
usedcores=4
registerDoParallel(usedcores)
# Import object statistics as dataframe
features <- read.csv('../../../Results_V2/Classification_features/features_tile_177.csv', sep=',', header=TRUE, row.names=1)
# Load trained RF model
rfModel <- readRDS('../../../Results_V2/Classif_RF_TEST/rf_trained_model.rda')
# Predict probability of each class (SoftProb)
predicted_prob <- data.frame(predict(rfModel, features, type='prob'))
names(predicted_prob) <- substring(names(predicted_prob),2)
colnames(predicted_prob) <- paste('prob', colnames(predicted_prob), sep = '_')
# Export class prob to csv
path_tmp_csv <- tempfile(pattern = 'file', tmpdir = tempdir(), fileext = '.csv')
write.csv(predicted_prob, file=path_tmp_csv, row.names=TRUE, quote=FALSE)
# Compute ERP (Equivalent Reference Probability) using Python function
path_tmp_csv_ERP = ComputeERPfromCsv(path_tmp_csv, delimiter=',', erp_name='ERP', start_index=0L, stop_index=FALSE)
predicted_prob_ERP <- read.csv(path_tmp_csv_ERP, sep=',', header=TRUE, row.names=1)
View(predicted_prob)
# Predict label (SoftMAX)
predicted_label <- data.frame(predict(rfModel, features))
View(predicted_label)
# Compute ERP (Equivalent Reference Probability) using Python function
path_tmp_csv_ERP = ComputeERPfromCsv(path_tmp_csv, delimiter=',', erp_name='ERP', start_index=1L, stop_index=FALSE)
predicted_prob_ERP <- read.csv(path_tmp_csv_ERP, sep=',', header=TRUE, row.names=1)
# Predict label (SoftMAX)
predicted_label <- data.frame(predict(rfModel, features))
names(predicted_label) <- 'rf_label'
# Merge probabilities and label in final dataframe
rf_predictions <- data.frame(cat_=rownames(features), predicted_prob_ERP, predicted_label)
# Export final result to csv
write.csv(rf_predictions, file='../../../Results_V2/Classif_RF_TEST/classif_csv/RF_fusion_tile_177.csv', row.names=FALSE, quote=FALSE)
